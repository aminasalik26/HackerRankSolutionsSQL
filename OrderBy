# QUESTION 1) Query the `Name` of any student in `STUDENTS` who scored higher than 75 Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.

The `STUDENTS` table is described as follows:

| Column  | Type    | Description                        |
|---------|---------|------------------------------------|
| ID      | Integer | Unique identifier for the student  |
| Name    | String  | Name of the student                |
| Marks   | Integer | Marks scored by the student        |


## SQL SOLUTION

SELECT 
    NAME
FROM
    STUDENTS
WHERE 
    MARKS > 75
ORDER BY 
    RIGHT(NAME, 3), 
    ID;



# QUESTION 2) Write a query that prints a list of employee names (i.e.: the `name` attribute) from the `Employee` table in alphabetical order.

The `Employee` table is described as follows:

| Column        | Type    | Description                              |
|---------------|---------|------------------------------------------|
| employee_id   | Integer | Unique identifier for the employee       |
| name          | String  | Name of the employee                     |
| months        | Integer | Number of months the employee has worked |
| salary        | Integer | Salary of the employee                   |


## SQL SOLUTION

SELECT
    name
FROM
    Employee
ORDER BY
    name;




# QUESTION 3) Write a query that prints a list of employee names (i.e.: the `name` attribute) for employees in `Employee` 
having a salary greater than $2000 per month who have been employees for less than 10 months. Sort your result by ascending `employee_id`.

The `Employee` table is described as follows:

| Column        | Type    | Description                              |
|---------------|---------|------------------------------------------|
| employee_id   | Integer | Unique identifier for the employee       |
| name          | String  | Name of the employee                     |
| months        | Integer | Number of months the employee has worked |
| salary        | Integer | Salary of the employee                   |


## SQL SOLUTION

SELECT 
    name
FROM
    Employee
WHERE 
    salary > 2000
    AND months < 10
ORDER BY
    employee_id;

